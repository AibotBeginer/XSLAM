#include "xslam/dbow3/loop_closure_detect.h"
#include "DBoW3/DBoW3.h"

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/features2d/features2d.hpp>

#include <iostream>
#include <vector>

#include "glog/logging.h"

namespace xslam {
namespace dbow3 {

void LoopClosureDetect::RunDemo(const std::vector<std::string>& paths)
{
     // read the images and database  
    LOG(INFO) << "reading database";
    DBoW3::Vocabulary vocab(paths[0] + "/vocabulary.yml.gz");
    // DBoW3::Vocabulary vocab("./vocab_larger.yml.gz");  // use large vocab if you want: 
    if (vocab.empty()) {
        LOG(ERROR) << "Vocabulary does not exist";
        return;
    }

    LOG(INFO) << "Reading images...";
    std::vector<cv::Mat> images;

    for (int i = 0; i < 10; i++) {
        std::string path = paths[1] + std::to_string(i + 1) + ".png";
        images.push_back(cv::imread(path));
    }

    // NOTE: in this case we are comparing images with a vocabulary generated by themselves, this may lead to overfit.
    // detect ORB features
    LOG(INFO) << "detecting ORB features ... ";
    cv::Ptr<cv::Feature2D> detector = cv::ORB::create();
    std::vector<cv::Mat> descriptors;
    for (cv::Mat &image:images) {
        std::vector<cv::KeyPoint> keypoints;
        cv::Mat descriptor;
        detector->detectAndCompute(image, cv::Mat(), keypoints, descriptor);
        descriptors.push_back(descriptor);
    }

    // we can compare the images directly or we can compare one image to a database 
    // images :
    LOG(INFO) << "comparing images with images ";
    for (int i = 0; i < images.size(); i++) {
        DBoW3::BowVector v1;
        vocab.transform(descriptors[i], v1);
        for (int j = i; j < images.size(); j++) {
            DBoW3::BowVector v2;
            vocab.transform(descriptors[j], v2);
            double score = vocab.score(v1, v2);
            LOG(INFO) << "image " << i << " vs image " << j << " : " << score;
        }
        std::cout << std::endl;
    }

    // or with database 
    LOG(INFO) << "comparing images with database ";
    DBoW3::Database db(vocab, false, 0);
    for (int i = 0; i < descriptors.size(); i++)
        db.add(descriptors[i]);

    LOG(INFO) << "database info: " << db;;
    for (int i = 0; i < descriptors.size(); i++) {
        DBoW3::QueryResults ret;
        db.query(descriptors[i], ret, 4);      // max result=4
        LOG(INFO) << "searching for image " << i << " returns " << ret;;
    }
    LOG(INFO) << "done";;
}

} // namespace dbow3
} // namespace xslam